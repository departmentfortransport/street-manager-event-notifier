aliases:
  - &prepare_ssh_key
    name: Prepare SSH key
    command: |
      mkdir -p .ssh
      echo ${SSH_PRIV_KEY} | base64 --decode > .ssh/id_rsa
      chmod 0600 .ssh/id_rsa
  - &assume_dev_admin_role
    name: Assume Admin role on dev account
    command: |
      unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
      export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_CI_USER_DEV_ACC}"
      export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_CI_USER_DEV_ACC}"
      TOKEN=$(aws sts assume-role \
        --role-arn arn:aws:iam::${AWS_ACC_ID_DEV}:role/Dev-Admin \
        --role-session-name "$(head /dev/urandom | LC_CTYPE=C tr -dc A-Za-z0-9 | head -c 18 ; echo '')"\
        )
      echo "export AWS_ACCESS_KEY_ID=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["AccessKeyId"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SECRET_ACCESS_KEY=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SecretAccessKey"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SESSION_TOKEN=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SessionToken"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_DEFAULT_REGION=eu-west-2" >> $BASH_ENV
  - &assume_preview_admin_role
    name: Assume role on Preview account
    command: |
      unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
      export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_CI_USER_PREVIEW_ACC}"
      export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_CI_USER_PREVIEW_ACC}"
      TOKEN=$(aws sts assume-role \
        --role-arn arn:aws:iam::${AWS_ACC_ID_PREVIEW}:role/${AWS_ROLE_CI_ADMIN_PREVIEW_ACC} \
        --role-session-name "$(head /dev/urandom | LC_CTYPE=C tr -dc A-Za-z0-9 | head -c 18 ; echo '')"\
        )
      echo "export AWS_ACCESS_KEY_ID=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["AccessKeyId"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SECRET_ACCESS_KEY=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SecretAccessKey"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SESSION_TOKEN=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SessionToken"]' 2> /dev/null)" >> $BASH_ENV
  - &assume_preprod_admin_role
    name: Assume role on Preprod account
    command: |
      unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
      export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_CI_USER_PREPROD_ACC}"
      export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_CI_USER_PREPROD_ACC}"
      TOKEN=$(aws sts assume-role \
        --role-arn arn:aws:iam::${AWS_ACC_ID_PREPROD}:role/${AWS_ROLE_CI_ADMIN_PREPROD_ACC} \
        --role-session-name "$(head /dev/urandom | LC_CTYPE=C tr -dc A-Za-z0-9 | head -c 18 ; echo '')"\
        )
      echo "export AWS_ACCESS_KEY_ID=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["AccessKeyId"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SECRET_ACCESS_KEY=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SecretAccessKey"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SESSION_TOKEN=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SessionToken"]' 2> /dev/null)" >> $BASH_ENV
  - &assume_prod_admin_role
    name: Assume role on Prod account
    command: |
      unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
      export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID_CI_USER_PROD_ACC}"
      export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY_CI_USER_PROD_ACC}"
      TOKEN=$(aws sts assume-role \
        --role-arn arn:aws:iam::${AWS_ACC_ID_PROD}:role/${AWS_ROLE_CI_ADMIN_PROD_ACC} \
        --role-session-name "$(head /dev/urandom | LC_CTYPE=C tr -dc A-Za-z0-9 | head -c 18 ; echo '')"\
        )
      echo "export AWS_ACCESS_KEY_ID=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["AccessKeyId"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SECRET_ACCESS_KEY=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SecretAccessKey"]' 2> /dev/null)" >> $BASH_ENV
      echo "export AWS_SESSION_TOKEN=$(echo $TOKEN | python -c 'import json,sys;print json.load(sys.stdin)["Credentials"]["SessionToken"]' 2> /dev/null)" >> $BASH_ENV
  - &ecr_login
    name: ECR login
    command: $(aws ecr get-login --no-include-email --region eu-west-2)
  - &build_and_release
    name: Build and release
    command: |
      source $BASH_ENV
      mkdir /tmp/lambda
      docker build --build-arg CIRCLE_SHA1=${CIRCLE_SHA1} --build-arg NODE_BASE_IMAGE=${NODE_BASE_IMAGE} -t event-notifier:${CIRCLE_SHA1} . -f Dockerfile_event-notifier
      docker run \
        -v /tmp/lambda:/host \
        -it event-notifier:${CIRCLE_SHA1} \
        /bin/sh -l -c "cp ${CIRCLE_SHA1}.zip /host"
      aws s3 cp /tmp/lambda/${CIRCLE_SHA1}.zip s3://${DEV_BUCKET}
  - &push_dev_bucket
    name: Push dev bucket
    command: |
      mkdir /tmp/lambda
      aws s3 cp s3://${DEV_BUCKET}/${CIRCLE_SHA1}.zip /tmp/lambda
      mv /tmp/lambda/${CIRCLE_SHA1}.zip /tmp/lambda/${CIRCLE_TAG}.zip
      aws s3 cp /tmp/lambda/${CIRCLE_TAG}.zip s3://${DEV_BUCKET}
  - &push_preview_bucket
    name: Push preview bucket
    command: aws s3 cp /tmp/lambda/${CIRCLE_TAG}.zip s3://${PREVIEW_BUCKET}
  - &push_preprod_bucket
    name: Push preprod bucket
    command: aws s3 cp /tmp/lambda/${CIRCLE_TAG}.zip s3://${PREPROD_BUCKET}
  - &push_prod_bucket
    name: Push prod bucket
    command: aws s3 cp /tmp/lambda/${CIRCLE_TAG}.zip s3://${PROD_BUCKET}
  - &cleanup
    name: Cleanup
    command: |
      rm -rf .ssh
  - &release_to_int
    name: Clone street-manager-int repo
    command: |
      docker run \
        -e CIRCLE_SHA1=$CIRCLE_SHA1 \
        -e CLUSTER_NAME=$CLUSTER_NAME \
        -e NAMESPACE=$NAMESPACE \
        -e SSH_PRIV_KEY=$SSH_PRIV_KEY \
        -it alpine:latest \
        sh -l -c "
          mkdir -p ~/.ssh
          echo ${SSH_PRIV_KEY} | base64 -d > ~/.ssh/id_rsa
          chmod 0600 ~/.ssh/id_rsa
          export GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -F /dev/null'
          apk add git openssh-client jq curl
          curl -sLo /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/2.2.1/yq_linux_amd64
          chmod +x /usr/local/bin/yq
          git config --global user.name "streetmanagerops"
          git config --global user.email streetmanagerops@kainos.com
          git clone git@github.com:departmentfortransport/street-manager-$NAMESPACE.git
          cd street-manager-$NAMESPACE
          /usr/local/bin/yq w -i config.yaml apps.event_notifier.tag $CIRCLE_SHA1
          git diff --exit-code
          git commit -am \"Bumping event-notifier version.\"
          git push -u origin
        "
version: 2.1
jobs:
  build:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run: *prepare_ssh_key
      - run: *assume_dev_admin_role
      - run: *ecr_login
      - run: *build_and_release
      - run: *cleanup
  deployment:
    machine: true
    environment:
      CLUSTER_NAME: dev-b.stwrks-dev.net
      NAMESPACE: int
    steps:
      - run: *prepare_ssh_key
      - run: *release_to_int
  tagged_build:
    machine: true
    steps:
      - checkout
      - run: *assume_dev_admin_role
      - run: *ecr_login
      - run: *push_dev_bucket
      - run: *assume_preview_admin_role
      - run: *ecr_login
      - run: *push_preview_bucket
      - run: *assume_preprod_admin_role
      - run: *ecr_login
      - run: *push_preprod_bucket
      - run: *assume_prod_admin_role
      - run: *ecr_login
      - run: *push_prod_bucket
workflows:
  coverage:
    jobs:
      - build
      - deployment:
          requires:
            - build
          filters:
            branches:
              only:
                - /^master$/
  tagged_build:
    jobs:
      - tagged_build:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

